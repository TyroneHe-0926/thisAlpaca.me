import { Injectable } from '@angular/core';
import { Subscription, EMPTY, fromEvent } from 'rxjs';
export class ScrollService {
    constructor() {
        this.scrollSub = new Subscription();
        this.resizeSub = new Subscription();
        // set initial value
        this.manageScrollPos();
        // create observable that we can subscribe to from component or directive
        this.scrollObs = typeof window !== 'undefined' ? fromEvent(window, 'scroll') : EMPTY;
        // initiate subscription to update values
        this.scrollSub = this.scrollObs
            .subscribe(() => this.manageScrollPos());
        // create observable for changes in screen size
        this.resizeObs = typeof window !== 'undefined' ? fromEvent(window, 'resize') : EMPTY;
        // initiate subscription to update values
        this.resizeSub = this.resizeObs
            .subscribe(() => this.manageScrollPos());
    }
    manageScrollPos() {
        // update service property
        this.pos = typeof window !== 'undefined' ? window.pageYOffset : 0;
    }
    ngOnDestroy() {
        this.scrollSub.unsubscribe();
        this.resizeSub.unsubscribe();
    }
}
ScrollService.decorators = [
    { type: Injectable }
];
ScrollService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vcHJvamVjdHMvbmcyLWFuaW1hdGUtb24tc2Nyb2xsL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9zY3JvbGwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQ3RELE9BQU8sRUFBYyxZQUFZLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUdsRSxNQUFNLE9BQU8sYUFBYTtJQVF4QjtRQUhRLGNBQVMsR0FBaUIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUM3QyxjQUFTLEdBQWlCLElBQUksWUFBWSxFQUFFLENBQUM7UUFJbkQsb0JBQW9CO1FBQ3BCLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUV2Qix5RUFBeUU7UUFDekUsSUFBSSxDQUFDLFNBQVMsR0FBRyxPQUFPLE1BQU0sS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUVyRix5Q0FBeUM7UUFDekMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUzthQUM1QixTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFFM0MsK0NBQStDO1FBQy9DLElBQUksQ0FBQyxTQUFTLEdBQUcsT0FBTyxNQUFNLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFFckYseUNBQXlDO1FBQ3pDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVM7YUFDNUIsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO0lBRTdDLENBQUM7SUFHTyxlQUFlO1FBRXJCLDBCQUEwQjtRQUMxQixJQUFJLENBQUMsR0FBRyxHQUFHLE9BQU8sTUFBTSxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXBFLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUM3QixJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQy9CLENBQUM7OztZQXpDRixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24sIEVNUFRZLCBmcm9tRXZlbnQgfSBmcm9tICdyeGpzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNjcm9sbFNlcnZpY2UgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuXG4gIHNjcm9sbE9iczogT2JzZXJ2YWJsZTxhbnk+O1xuICByZXNpemVPYnM6IE9ic2VydmFibGU8YW55PjtcbiAgcG9zOiBudW1iZXI7XG4gIHByaXZhdGUgc2Nyb2xsU3ViOiBTdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gIHByaXZhdGUgcmVzaXplU3ViOiBTdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG5cbiAgICAvLyBzZXQgaW5pdGlhbCB2YWx1ZVxuICAgIHRoaXMubWFuYWdlU2Nyb2xsUG9zKCk7XG5cbiAgICAvLyBjcmVhdGUgb2JzZXJ2YWJsZSB0aGF0IHdlIGNhbiBzdWJzY3JpYmUgdG8gZnJvbSBjb21wb25lbnQgb3IgZGlyZWN0aXZlXG4gICAgdGhpcy5zY3JvbGxPYnMgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IGZyb21FdmVudCh3aW5kb3csICdzY3JvbGwnKSA6IEVNUFRZO1xuXG4gICAgLy8gaW5pdGlhdGUgc3Vic2NyaXB0aW9uIHRvIHVwZGF0ZSB2YWx1ZXNcbiAgICB0aGlzLnNjcm9sbFN1YiA9IHRoaXMuc2Nyb2xsT2JzXG4gICAgICAuc3Vic2NyaWJlKCgpID0+IHRoaXMubWFuYWdlU2Nyb2xsUG9zKCkpO1xuXG4gICAgLy8gY3JlYXRlIG9ic2VydmFibGUgZm9yIGNoYW5nZXMgaW4gc2NyZWVuIHNpemVcbiAgICB0aGlzLnJlc2l6ZU9icyA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gZnJvbUV2ZW50KHdpbmRvdywgJ3Jlc2l6ZScpIDogRU1QVFk7XG5cbiAgICAvLyBpbml0aWF0ZSBzdWJzY3JpcHRpb24gdG8gdXBkYXRlIHZhbHVlc1xuICAgIHRoaXMucmVzaXplU3ViID0gdGhpcy5yZXNpemVPYnNcbiAgICAgIC5zdWJzY3JpYmUoKCkgPT4gdGhpcy5tYW5hZ2VTY3JvbGxQb3MoKSk7XG5cbiAgfVxuXG5cbiAgcHJpdmF0ZSBtYW5hZ2VTY3JvbGxQb3MoKTogdm9pZCB7XG5cbiAgICAvLyB1cGRhdGUgc2VydmljZSBwcm9wZXJ0eVxuICAgIHRoaXMucG9zID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cucGFnZVlPZmZzZXQgOiAwO1xuXG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnNjcm9sbFN1Yi51bnN1YnNjcmliZSgpO1xuICAgIHRoaXMucmVzaXplU3ViLnVuc3Vic2NyaWJlKCk7XG4gIH1cblxufVxuIl19